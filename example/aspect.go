// Code generated by github.com/CherkashinEvgeny/goaspect. DO NOT EDIT.
package main

import (
	"context"
	"github.com/CherkashinEvgeny/goaspect"
	"reflect"
)

var mapType = reflect.TypeOf((*Map)(nil)).Elem()

type MapAspect struct {
	Impl   Map
	Aspect aspect.Aspect
}

var mapTypeMethodDelete, _ = mapType.MethodByName("Delete")

func (a MapAspect) Delete(arg0 context.Context, arg1 string) error {
	handler := a.Aspect.Handler(mapType, mapTypeMethodDelete)
	handler.Before(arg0, arg1)
	res0 := a.Impl.Delete(arg0, arg1)
	handler.After(res0)
	return res0
}

var mapTypeMethodGet, _ = mapType.MethodByName("Get")

func (a MapAspect) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	handler := a.Aspect.Handler(mapType, mapTypeMethodGet)
	handler.Before(arg0, arg1)
	res0, res1 := a.Impl.Get(arg0, arg1)
	handler.After(res0, res1)
	return res0, res1
}

var mapTypeMethodSet, _ = mapType.MethodByName("Set")

func (a MapAspect) Set(arg0 context.Context, arg1 string, arg2 []byte) error {
	handler := a.Aspect.Handler(mapType, mapTypeMethodSet)
	handler.Before(arg0, arg1, arg2)
	res0 := a.Impl.Set(arg0, arg1, arg2)
	handler.After(res0)
	return res0
}
